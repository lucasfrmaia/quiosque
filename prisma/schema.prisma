// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// Usuários do Sistema
// =====================
model User {
  id       Int      @id @default(autoincrement())
  name     String
  password String

  @@map("user")
}


// =====================
// Fornecedores de Insumos
// =====================
model Fornecedor {
  id       Int      @id @default(autoincrement())
  nome     String
  cnpj     String?  @unique
  telefone String?
  email    String?

  compras  NotaFiscalCompra[]

  @@map("fornecedor")
}

// =====================
// Categorias de Produto
// =====================
model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique

  produtos Produto[]

  @@map("categoria")
}

// =====================
// Produtos (Insumos ou Cardápio)
// =====================
model Produto {
  id          Int       @id @default(autoincrement())
  nome        String
  descricao   String?
  imagemUrl   String?
  ativo       Boolean   @default(true)
  tipo        TipoProduto

  categoriaId Int?
  categoria   Category? @relation(fields: [categoriaId], references: [id], onDelete: SetNull)

  estoques    ProdutoEstoque[]
  compras     ProdutoCompra[]
  vendas      ProdutoVenda[]

  @@map("produto")
}

enum TipoProduto {
  INSUMO
  CARDAPIO
}

// =====================
// Estoque
// =====================
model ProdutoEstoque {
  id           Int      @id @default(autoincrement())
  preco        Float
  quantidade   Int
  dataValidade DateTime?
  unidade      String   @default("Unidade")

  produtoId Int
  produto   Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@map("produto_estoque")
}

// =====================
// Nota Fiscal de Compras (entrada de estoque)
// =====================
model NotaFiscalCompra {
  id          Int      @id @default(autoincrement())
  data        DateTime @default(now())
  total       Float

  fornecedorId Int
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id], onDelete: Cascade)

  produtos ProdutoCompra[]

  @@map("nota_fiscal_compra")
}

model ProdutoCompra {
  id             Int      @id @default(autoincrement())
  notaFiscalId   Int
  produtoId      Int
  quantidade     Int
  unidade        String   @default("Unidade")
  precoUnitario  Float

  produto        Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  notaFiscal     NotaFiscalCompra @relation(fields: [notaFiscalId], references: [id], onDelete: Cascade)

  @@map("produto_compra")
  @@unique([notaFiscalId, produtoId])
}

// =====================
// Nota Fiscal de Vendas (saída para cliente)
// =====================
model NotaFiscalVenda {
  id        Int      @id @default(autoincrement())
  data      DateTime @default(now())
  total     Float

  produtos  ProdutoVenda[]

  @@map("nota_fiscal_venda")
}

model ProdutoVenda {
  id             Int      @id @default(autoincrement())
  notaFiscalId   Int
  produtoId      Int
  quantidade     Int
  unidade        String   @default("Unidade")
  precoUnitario  Float

  produto        Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  notaFiscal     NotaFiscalVenda @relation(fields: [notaFiscalId], references: [id], onDelete: Cascade)

  @@map("produto_venda")
  @@unique([notaFiscalId, produtoId])
}
